// Experimentation - minimal working examples
/*
make all
./WarGame
*/

#include <SDL2/SDL.h>  
#include <iostream>
#include <cmath>
#include <thread>


// void UpdateWindowTitle(SDL_Windows window, int score, int health) {
//   std::string title{"!! WarGame !! -- Marines killed: " + std::to_string(score) + " Turret Health: " + std::to_string(health)};
//   SDL_SetWindowTitle(window, title.c_str());
// }



int main(int argc, char ** argv) {
    std::cout << "Starting program!\n";

    int kFramesPerSecond = 30;
    std::size_t target_frame_duration{1000 / kFramesPerSecond};

    bool quit = false;
    SDL_Event event;
 
    SDL_Init(SDL_INIT_VIDEO);
 
    SDL_Window * window = SDL_CreateWindow("!! WarGame !!", SDL_WINDOWPOS_UNDEFINED, SDL_WINDOWPOS_UNDEFINED, 1280, 840, 0);

    int xcoord, ycoord;
    Uint32 buttons;

    // Initializing renderer
    SDL_Renderer * renderer = SDL_CreateRenderer(window, -1, 0);

    // -------------------------- Load assets
    // Grass
    SDL_Surface * grassImage = SDL_LoadBMP("assets/grass4.bmp");
    SDL_Texture * grassTexture = SDL_CreateTextureFromSurface(renderer, grassImage);
    SDL_FreeSurface(grassImage);

    // Resizing
    SDL_Rect gr1rect = { 0, 0, 640, 420 };
    SDL_Rect gr2rect = { 640, 0, 640, 420 };
    SDL_Rect gr3rect = { 0, 420, 640, 420 };
    SDL_Rect gr4rect = { 640, 420, 640, 420 };

    // Add trees
    SDL_Surface * tree1 = SDL_LoadBMP("assets/tree1.bmp");
    SDL_Surface * tree2 = SDL_LoadBMP("assets/tree2.bmp");
    SDL_Surface * tree3 = SDL_LoadBMP("assets/tree3.bmp");
    SDL_Texture * tree1text = SDL_CreateTextureFromSurface(renderer, tree1);
    SDL_Texture * tree2text = SDL_CreateTextureFromSurface(renderer, tree2);
    SDL_Texture * tree3text = SDL_CreateTextureFromSurface(renderer, tree3);
    SDL_FreeSurface(tree1);
    SDL_FreeSurface(tree2);
    SDL_FreeSurface(tree3);
    SDL_Rect t1rect = { 154, 185, 240, 240 };
    SDL_Rect t2rect = { 825, 94, 240, 240 };
    SDL_Rect t3rect = { 915, 523, 240, 240 };

    Uint32 title_timestamp = SDL_GetTicks();
    Uint32 frame_start;
    Uint32 frame_end;
    Uint32 frame_duration;

    // ######################################################################## Start game loop
    while (!quit) {
        while (SDL_PollEvent(&event) != NULL) {

            switch (event.type) {
                case SDL_QUIT:
                    quit = true;
                    break;
            }
        }
    frame_start = SDL_GetTicks();

    // Clear screen
    SDL_RenderClear(renderer);

    // Capture mouse
    SDL_PumpEvents();  // make sure we have the latest mouse state.
    buttons = SDL_GetMouseState(&xcoord, &ycoord);


    // GRASS
    SDL_RenderCopy(renderer, grassTexture, NULL, &gr1rect);
    SDL_RenderCopy(renderer, grassTexture, NULL, &gr2rect);
    SDL_RenderCopy(renderer, grassTexture, NULL, &gr3rect);
    SDL_RenderCopy(renderer, grassTexture, NULL, &gr4rect);
    // TREES
    SDL_RenderCopy(renderer, tree1text, NULL, &t1rect);
    SDL_RenderCopy(renderer, tree2text, NULL, &t2rect);
    SDL_RenderCopy(renderer, tree3text, NULL, &t3rect);

    // Update Screen
    SDL_RenderPresent(renderer);

    frame_end = SDL_GetTicks();

    // Keep track of how long each loop through the input/update/render cycle
    // takes.
    frame_duration = frame_end - frame_start;

    // After every second, update the window title.
    if (frame_end - title_timestamp >= 1000) {
        //UpdateWindowTitle(window, 0, 100);
    }

    // If the time for this frame is too small (i.e. frame_duration is
    // smaller than the target ms_per_frame), delay the loop to
    // achieve the correct frame rate.
    if (frame_duration < target_frame_duration) {
        SDL_Delay(target_frame_duration - frame_duration);
    }

    // ######################################################################## End game loop
    }

    SDL_DestroyTexture(grassTexture);
    SDL_DestroyTexture(tree1text);
    SDL_DestroyTexture(tree2text);
    SDL_DestroyTexture(tree3text);
    //SDL_DestroyTexture(mrnText);
    //SDL_FreeSurface(image);
    SDL_DestroyRenderer(renderer);
    SDL_DestroyWindow(window);
    SDL_Quit();
    std::cout << "Program terminating...\n";

    return 0;
}